var documenterSearchIndex = {"docs":
[{"location":"#ElasticNetworks.jl-Documentation","page":"Home","title":"ElasticNetworks.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Data-structure-for-3D-elastic-networks-made-of-harmonic-springs.","page":"Home","title":"Data structure for 3D elastic networks made of harmonic springs.","text":"","category":"section"},{"location":"#ElasticNetworks.Network","page":"Home","title":"ElasticNetworks.Network","text":"mutable struct Network\n\nModels a Hookean spring network.\n\nFields\n\ng::SimpleGraph : Graph specifying the connectivity of the network.\nbasis::Matrix{Float64} : Basis for the nodes.\npoints::Matrix{Float64} : Coordinates of the nodes in space.\nrest_lengths::Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, Float64} : Rest lengths of the spring edges in the network.\nimage_info::Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, Vector{Int}} : Specifies which image of node j node i is connected to in periodic boundary conditions.\nyoungs::Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, Float64} : Young’s modulus of the spring edges, defining their stiffness.\n\n\n\n\n\n","category":"type"},{"location":"#Network-descriptors","page":"Home","title":"Network descriptors","text":"","category":"section"},{"location":"#ElasticNetworks.mean_degree-Tuple{Network}","page":"Home","title":"ElasticNetworks.mean_degree","text":"mean_degree(net::Network) → Float64\n\nReturns the average degree of nodes in the elastic network net that have degree ≥ 3.\n\nArguments\n\nnet::Network : An elastic network \n\nReturns\n\nFloat64 : The mean degree of qualifying nodes, or 0.0 if none meet the threshold.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.strains-Tuple{Network}","page":"Home","title":"ElasticNetworks.strains","text":"strains(net::Network) → Vector{Float64}\n\nComputes the edge-wise strain magnitudes (absolute values) in the elastric network net, defined as the relative deviation from rest length for each edge.\n\nArguments\n\nnet::Network :  An elastic network \n\nReturns\n\nVector{Float64} : A vector of strain values for each edge in net.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.tensions-Tuple{Network}","page":"Home","title":"ElasticNetworks.tensions","text":"tensions(net::Network) → Vector{Float64}\n\nComputes the edge-wise tensions in the elastic network net, defined as the product of strain and Young’s modulus for each edge.\n\nArguments\n\nnet::Network : An elastic network\n\nReturns\n\nVector{Float64} : A vector of tension values for each edge in net.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.elastic_energy-Tuple{Network}","page":"Home","title":"ElasticNetworks.elastic_energy","text":"elastic_energy(net::Network) → Float64\n\nComputes the total elastic potential energy of the elastic network net, based on pairwise edge deformations relative to their rest lengths.\n\nArguments\n\nnet::Network : An elastic network\n\nReturns\n\nFloat64 : Total elastic energy stored in the network\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.energy_gradient-Tuple{Network}","page":"Home","title":"ElasticNetworks.energy_gradient","text":"energy_gradient(net::Network) → Vector{Float64}\n\nComputes the gradient of the elastic energy in the elastic network net, evaluated with respect to node positions.\n\nArguments\n\nnet::Network : An elastic network\n\nReturns\n\nVector{Float64} : The energy gradient vector over all nodes in net\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.energy_hessian-Tuple{Network}","page":"Home","title":"ElasticNetworks.energy_hessian","text":"energy_hessian(net::Network) → Matrix{Float64}\n\nComputes the Hessian matrix of the elastic energy in the elastic network net, representing second derivatives of the energy with respect to node positions.\n\nArguments\n\nnet::Network : An elastic network\n\nReturns\n\nMatrix{Float64} : The elastic energy Hessian matrix for net\n\n\n\n\n\n","category":"method"},{"location":"#Network-modifiers:-geometry-only","page":"Home","title":"Network modifiers: geometry only","text":"","category":"section"},{"location":"#ElasticNetworks.relax-Tuple{Any}","page":"Home","title":"ElasticNetworks.relax","text":"relax(net; show_trace=false, g_tol=1e-6)\nrelax!(net; show_trace=false, g_tol=1e-6)\n\nMinimizes the elastic energy of a network using Newton's optimization method, adjusting node positions to a lower-energy configuration.\n\nMethods:\n\nrelax(net; show_trace, g_tol) → (Matrix{Float64}, Float64)   Returns the optimized node positions and the minimized elastic energy value.\nrelax!(net; show_trace, g_tol) → nothing   Performs relaxation in-place by updating net.points directly.\n\nArguments\n\nnet::Network : The network structure containing connectivity, node positions, and edge properties.\nshow_trace::Bool (optional, default=false) : Whether to display optimization progress.\ng_tol::Float64 (optional, default=1e-6) : Gradient tolerance for termination criteria.\n\nBehavior\n\nExtracts network data into primitive form using net_info_primitive(net).\nDefines the elastic energy function (f), its gradient (g!), and Hessian (h!).\nUses Newton's method (Optim.optimize) for minimization.\nrelax! modifies the network in-place, updating net.points.\n\n\n\n\n\n","category":"method"},{"location":"#Compute-elastic-moduli","page":"Home","title":"Compute elastic moduli","text":"","category":"section"},{"location":"#ElasticNetworks.moduli-Tuple{Network}","page":"Home","title":"ElasticNetworks.moduli","text":"moduli(net::Network)\n\nComputes the elastic moduli of a network by applying small deformations and extracting the stiffness components.\n\nDescription\n\nThis function performs an energy minimization (relax!) and then computes elastic moduli using automatic differentiation. The moduli components are obtained by introducing small strain perturbations in various deformation modes and measuring the corresponding energy response.\n\nArguments\n\nnet::Network : The elastic network structure \n\nBehavior\n\nRelaxation - Minimizes the elastic energy of the network to find a stable configuration.\nDeformation Basis Construction - Defines strain modes using deformation basis functions.\nHessian Computation - Computes the Hessian of the system at equilibrium.\nEnergy Perturbation & Differentiation - Uses automatic differentiation (ForwardDiff.hessian) to compute energy responses to small deformations.\nModuli Extraction - Computes bulk modulus (B), shear modulus (G), and individual elastic constants.\n\nReturns\n\nB::Float64 : Bulk modulus.\nG::Float64 : Shear modulus.\nc1111::Float64, c2222::Float64, c3333::Float64 : Normal stress components.\nc1212::Float64, c1313::Float64, c2323::Float64 : Shear stress components.\nc1122::Float64, c1133::Float64, c2233::Float64 : Mixed stress components.\n\n\n\n\n\n","category":"method"},{"location":"#Network-modifiers:-topology","page":"Home","title":"Network modifiers: topology","text":"","category":"section"},{"location":"#ElasticNetworks.add_edge!","page":"Home","title":"ElasticNetworks.add_edge!","text":"add_edge!(net::Network, s::Int, d::Int, rl::Float64, y::Float64 = 1.0) → Nothing\n\nAdds an undirected harmonic spring edge to the elastic network net between nodes s (source) and d (destination), with specified rest length rl and optional Young’s modulus y.\n\nAlthough the edge is physically symmetric, the (s, d) convention provides directional consistency in the data structure and indexing.\n\nArguments\n\nnet::Network : An elastic network\ns::Int : Source node index\nd::Int : Destination node index\nrl::Float64 : Rest length of the edge\ny::Float64 = 1.0 : Young’s modulus of the edge (default = 1.0)\n\nReturns\n\nNothing : Modifies net in place\n\n\n\n\n\n","category":"function"},{"location":"#ElasticNetworks.rem_edge!-Tuple{Network, Int64, Int64}","page":"Home","title":"ElasticNetworks.rem_edge!","text":"rem_edge!(net::Network, s::Int, d::Int) → Nothing\n\nRemoves an edge from the elastic network net between nodes s (source) and d (destination).\n\nThis operation deletes the edge from the underlying graph and also removes associated entries from the network’s dictionaries: rest lengths, periodic image information, and Young’s moduli.\n\nArguments\n\nnet::Network : An elastic network\ns::Int : Source node index\nd::Int : Destination node index\n\nReturns\n\nNothing : Modifies net in place\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.rem_vertex!-Tuple{Network, Int64}","page":"Home","title":"ElasticNetworks.rem_vertex!","text":"rem_vertex!(net::Network, v::Int) → Nothing\n\nRemoves a vertex from the elastic network net, updating node positions and edge data to reflect internal graph indexing changes.\n\nIn Graphs.jl, removing a vertex causes the last vertex to be moved into its place. This function adjusts the net.points array and updates associated edge dictionaries—rest_lengths, image_info, and youngs—to ensure consistency with the reshuffled indices.\n\nArguments\n\nnet::Network : An elastic network\nv::Int : Index of the vertex to remove\n\nReturns\n\nNothing : Modifies net in place\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.pluck_out_edge!-Tuple{Network, Graphs.SimpleGraphs.SimpleEdge, Function}","page":"Home","title":"ElasticNetworks.pluck_out_edge!","text":"pluck_out_edge!(net::Network, e::Graphs.SimpleGraphs.SimpleEdge, direction::Function) → Nothing\n\nReplaces an edge e in the elastic network net by duplicating one of its endpoints and reconnecting the edge to the new node.\n\nThis transformation detaches one node of the edge (chosen via the direction function) and moves it to a freshly added vertex with identical coordinates. The original edge is removed, and a new edge—retaining the same rest length and Young’s modulus—is added between the anchoring node and the duplicated node. This structurally alters the network by \"plucking out\" one endpoint, allowing localized rewiring or boundary conditioning.\n\nArguments\n\nnet::Network : An elastic network\ne::Edge : Edge to be replaced\ndirection::Function : A function (src or dst) specifying which node to duplicate\n\nReturns\n\nNothing : Modifies net in place\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.plug_in_edge!-Tuple{Network, Int64, Int64}","page":"Home","title":"ElasticNetworks.plug_in_edge!","text":"plug_in_edge!(net::Network, deg1node::Int, accepting_node::Int) → Nothing\n\nMerges a dangling node into an existing node in the elastic network net by removing the temporary degree-1 node (deg1node) and attaching its edge to accepting_node.\n\nThis operation:\n\nVerifies that deg1node has exactly one neighbor (i.e. was previously created via pluck_out_edge!).\nRecreates the edge between the anchoring node and accepting_node, using the original rest length and Young’s modulus.\nRemoves deg1node, effectively merging its connection into accepting_node.\n\nArguments\n\nnet::Network : An elastic network\ndeg1node::Int : Index of the dangling node to merge\naccepting_node::Int : Index of the node receiving the merged edge\n\nReturns\n\nNothing : Modifies net in place\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.simplify_net!-Tuple{Network}","page":"Home","title":"ElasticNetworks.simplify_net!","text":"simplify_net!(net::Network) → Nothing\n\nSimplifies the elastic network net by iteratively pruning geometrically and topologically unstable nodes that may contribute soft modes.\n\nThis function:\n\nRemoves nodes with degree 0 or 1, which are disconnected or dangling.\nRemoves degree-2 nodes whose neighbor vectors form a bending angle below 179.99°, as these configurations introduce floppy or under-constrained regions.\nRepeats the simplification until no further changes occur.\n\nArguments\n\nnet::Network : An elastic network\n\nReturns\n\nNothing : Modifies net in place\n\n\n\n\n\n","category":"method"},{"location":"#Visualizing-a-network","page":"Home","title":"Visualizing a network","text":"","category":"section"},{"location":"#ElasticNetworks.visualize_net-Tuple{Network}","page":"Home","title":"ElasticNetworks.visualize_net","text":"visualize_net(net::Network) → Figure\n\nGenerates a 3D visualization of the elastic network net, displaying nodes and edges embedded in the simulation cell defined by net.basis.\n\nEdges are colored by normalized tension (default), derived from the product of strain and Young’s modulus. Periodic image contributions are shown by mirrored edge segments when applicable.\n\nArguments\n\nnet::Network : An elastic network to visualize\n\nReturns\n\nFigure : A Makie figure object showing the elastic network in 3D\n\n\n\n\n\n","category":"method"},{"location":"#Library-of-common-networks","page":"Home","title":"Library of common networks","text":"","category":"section"},{"location":"#ElasticNetworks.prestrained_network","page":"Home","title":"ElasticNetworks.prestrained_network","text":"prestrained_network(g, basis, points, ϵ, default_youngs=1.0) → Network\n\nCreates a Network with prestrained edges based on the provided graph, basis vectors, and node coordinates.\n\nArguments\n\ng::SimpleGraph : Graph specifying the connectivity of the network.\nbasis::Matrix{Float64} : Basis vectors defining the space in which the nodes are embedded.\npoints::Matrix{Float64} : Coordinates of the nodes.\nϵ::Float64 : Prestrain factor, adjusting the rest lengths of spring edges.\ndefault_youngs::Float64 (optional, default = 1.0) : Default Young’s modulus assigned to all edges.\n\nReturns\n\nNetwork : A network with computed rest lengths, image information for periodic boundaries, and Young's modulus values for each edge.\n\n\n\n\n\n","category":"function"},{"location":"#ElasticNetworks.diamond1000-Tuple{Float64, Float64}","page":"Home","title":"ElasticNetworks.diamond1000","text":"diamond1000(l::Float64, ϵ::Float64) → Network\n\nConstructs a 1000-node elastic network based on a diamond lattice within a cubic periodic cell of side length l.\n\nThis synthetic crystal-like geometry includes eight points per unit cell arranged to approximate tetrahedral bonding motifs. Nodes are placed within a 5×5×5 grid of unit cells, and edges connect nearest neighbors using a minimum image criterion. The returned network includes prestrain ϵ applied uniformly to all edges, enabling perturbative analysis or tuning of mechanical response.\n\nArguments\n\nl::Float64 : Side length of the periodic simulation box\nϵ::Float64 : Uniform prestrain factor applied to all edges\n\nReturns\n\nNetwork : A prestrained elastic network with diamond-like connectivity\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.cubic_network","page":"Home","title":"ElasticNetworks.cubic_network","text":"cubic_network(l::Float64, n_layers::Int, ϵ::Float64 = 0.0) → Network\n\nConstructs a periodic elastic network based on a cubic lattice of n_layers × n_layers × n_layers nodes within a simulation cell of side length l.\n\nNodes are evenly spaced along integer grid points, and edges are added between nearest neighbors using a minimum image distance check. The entire network is embedded in a unit cube scaled by l, and a uniform prestrain ϵ is applied to all edges to model mechanical perturbations or stress conditioning.\n\nArguments\n\nl::Float64 : Side length of the periodic simulation box\nn_layers::Int : Number of lattice layers along each axis\nϵ::Float64 = 0.0 : Uniform prestrain factor applied to all edges (default = 0)\n\nReturns\n\nNetwork : A prestrained cubic elastic network\n\n\n\n\n\n","category":"function"},{"location":"#ElasticNetworks.disordered_cubic_network-Tuple{Float64, Int64, Float64, Float64}","page":"Home","title":"ElasticNetworks.disordered_cubic_network","text":"disordered_cubic_network(l::Float64, n_layers::Int, disorder_param::Float64, ϵ::Float64) → Network\n\nGenerates a disordered elastic network by perturbing a regular cubic lattice and recalculating rest lengths to incorporate both geometric disorder and prestrain.\n\nThis function starts from a uniform cubic network and introduces positional disorder to each node by adding random displacements scaled by disorder_param. It then updates the edge rest lengths based on the new geometry, applying a uniform prestrain ϵ. The network is relaxed afterward to remove spurious stresses and achieve mechanical consistency.\n\nArguments\n\nl::Float64 : Side length of the periodic simulation box\nn_layers::Int : Number of lattice layers along each axis\ndisorder_param::Float64 : Magnitude of positional disorder relative to unit cell size\nϵ::Float64 : Uniform prestrain factor applied to edge rest lengths\n\nReturns\n\nNetwork : A relaxed elastic network with cubic topology and geometric disorder\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.er-Tuple{Float64, Matrix{Float64}, Float64, Float64, Float64}","page":"Home","title":"ElasticNetworks.er","text":"er(l::Float64, points::Matrix{Float64}, z::Float64, ϵ::Float64, max_rl::Float64) → Network\n\nGenerates a randomized elastic network (Erdős–Rényi-style) embedded in a periodic cube of side length l, with connectivity tuned to achieve an average degree z.\n\nStarting from a graph with no edges, the function randomly samples pairs of distinct nodes from the provided points, adding edges until the network reaches the target mean degree. Each added edge obeys a distance cutoff (< l/2) and is assigned a rest length reduced by the prestrain factor ϵ.\n\nArguments\n\nl::Float64 : Side length of the periodic simulation box\npoints::Matrix{Float64} : Node coordinates in reduced (unit-cell) space\nz::Float64 : Target average degree for the network\nϵ::Float64 : Uniform prestrain factor applied to edge rest lengths\n\nReturns\n\nNetwork : A randomized elastic network with approximately degree z\n\n\n\n\n\n","category":"method"},{"location":"#IO-functions","page":"Home","title":"IO functions","text":"","category":"section"},{"location":"#ElasticNetworks.net_info_primitive-Tuple{Network}","page":"Home","title":"ElasticNetworks.net_info_primitive","text":"net_info_primitive(net::Network)\n\nConverts network data into numerical matrices containing only primitive types, enabling efficient SIMD (Single Instruction, Multiple Data) operations if desired.\n\nWhat is SIMD?\n\nSIMD is a parallel computing technique that allows the same operation to be applied to multiple data points simultaneously. By structuring data for SIMD, numerical computations can be executed faster by leveraging modern processor optimizations.\n\nArguments\n\nnet::Network : The network structure containing connectivity, node positions, and edge properties.\n\nReturns\n\nbasis::Matrix{Float64} : Basis vectors defining the network space.\npoints::Vector{Float64} : Flattened node coordinates.\nedges::Matrix{Int64} : Edge connections formatted for numerical processing.\nrls::Vector{Float64} : Rest lengths of edges.\niis::Matrix{Int} : Image information for periodic boundary conditions.\nyoungs::Vector{Float64} : Young’s modulus values for edges.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.load_network-Tuple{String}","page":"Home","title":"ElasticNetworks.load_network","text":"load_network(filename::String) → Network\n\nLoads an elastic network from a .jld2 file containing precomputed graph geometry and edge attributes.\n\nThe input filename.jld2 file, upon loading with JLD2.load(filename), is expected to be a dictionary that contains:\n\n\"basis\" : A 3×3 matrix representing the unit cell basis\n\"nodes\" : A 3×N array of node coordinates relative to the basis\n\"edge_info\" : A matrix where each row describes an edge, including:\nnode indices,\nimage displacement vector,\nrest length,\n(optional) Young’s modulus\n\nThis function reconstructs the graph topology, assigns mechanical parameters, and builds the full Network object.\n\nArguments\n\nfilename::String : Path to the file containing serialized network data\n\nReturns\n\nNetwork : Reconstructed elastic network with geometry and physics\n\n\n\n\n\n","category":"method"},{"location":"#ElasticNetworks.save_network-Tuple{Network, String}","page":"Home","title":"ElasticNetworks.save_network","text":"save_network(net::Network, filename::String) → Nothing\n\nSaves the elastic network net to a .jld2 file containing the core structural and mechanical data.\n\nThe output file includes:\n\nbasis : 3×3 matrix representing the periodic unit cell\nnodes : 3×N array of reduced node coordinates\nedge_info : M×7 array where each row stores:   [src, dst, imgx, imgy, imgz, restlength, Young's modulus]\n\nThis format is compatible with load_network for later retrieval or sharing.   Ensure that filename ends with .jld2 for consistency.\n\nArguments\n\nnet::Network : The elastic network to serialize\nfilename::String : Path to the output file (must end in .jld2)\n\nReturns\n\nNothing : Writes the specified .jld2 file to disk\n\n\n\n\n\n","category":"method"}]
}
