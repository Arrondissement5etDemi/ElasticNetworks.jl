var documenterSearchIndex = {"docs":
[{"location":"#ElasticityAD.jl-Documentation","page":"Home","title":"ElasticityAD.jl Documentation","text":"","category":"section"},{"location":"#ElasticityAD.Network","page":"Home","title":"ElasticityAD.Network","text":"mutable struct Network\n\nModels a Hookean spring network.\n\nFields\n\ng::SimpleGraph : Graph specifying the connectivity of the network.\nbasis::Matrix{Float64} : Basis for the nodes.\npoints::Matrix{Float64} : Coordinates of the nodes in space.\nrest_lengths::Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, Float64} : Rest lengths of the spring edges in the network.\nimage_info::Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, Vector{Int}} : Specifies which image of node j node i is connected to in periodic boundary conditions.\nyoungs::Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, Float64} : Young’s modulus of the spring edges, defining their stiffness.\n\n\n\n\n\n","category":"type"},{"location":"#ElasticityAD.elastic_energy-NTuple{6, Any}","page":"Home","title":"ElasticityAD.elastic_energy","text":"elastic_energy(basis, points, egs, rls, iis, youngs)\nelastic_energy(net)\n\nComputes the total elastic potential energy of a network based on edge deformations.\n\nMethods:\n\nelastic_energy(basis, points, egs, rls, iis, youngs) → Float64   Computes the energy using explicitly provided network parameters.\nelastic_energy(net) → Float64   A convenience wrapper that extracts the network parameters using net_info_primitive(net).\n\nArguments\n\nbasis::Matrix{Float64} : Basis vectors defining the spatial representation.\npoints::Vector{Float64} : Flattened node coordinates.\negs::Matrix{Int64} : Edge connections within the network.\nrls::Vector{Float64} : Rest lengths of edges.\niis::Matrix{Int} : Image offsets for periodic boundary conditions.\nyoungs::Vector{Float64} : Young’s modulus values for each edge.\nnet::Network : The network structure containing connectivity, node positions, and edge properties.\n\nBehavior\n\nIterates over edges, computing their current length and energy contribution.\nUses a quadratic potential energy model to determine stored elastic energy.\nThe wrapper function elastic_energy(net) simplifies calling the function without manual data extraction.\n\nReturns\n\nFloat64 : The total elastic potential energy of the network.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticityAD.gradient!-Union{Tuple{T}, Tuple{Any, AbstractArray{T}, Vararg{Any, 5}}} where T","page":"Home","title":"ElasticityAD.gradient!","text":"gradient!(result, basis, points, egs, rls, iis, youngs)\ngradient(basis, points, edge_nodes, rls, iis, youngs)\n\nComputes the gradient of the elastic potential energy with respect to node positions and stores the result in-place.\n\nArguments\n\nresult::Vector{Float64} : Pre-allocated vector to store the computed gradient.\nbasis::Matrix{Float64} : Basis vectors defining the spatial representation.\npoints::Vector{Float64} : Flattened node coordinates for efficient access.\negs::Matrix{Int64} : Edge connections within the network.\nrls::Vector{Float64} : Rest lengths of the edges.\niis::Matrix{Int} : Image offsets for periodic boundary conditions.\nyoungs::Vector{Float64} : Young’s modulus values for each edge.\n\nBehavior\n\nInitializes result to zero before computing forces.\nIterates over edges, calculating displacements and forces using the basis transformation.\nAccumulates forces for each node pair and stores the final transformed values in result.\n\nReturns\n\nModifies result in-place with the computed gradient values.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticityAD.hessian!-NTuple{7, Any}","page":"Home","title":"ElasticityAD.hessian!","text":"hessian!(H, basis, points, egs, rls, iis, youngs)\n\nComputes the Hessian matrix (the second derivative with respect to node positions) of the elastic potential energy in place.\n\nArguments\n\nH::Matrix{Float64} : Pre-allocated (3N × 3N) matrix that will be modified in-place.\nbasis::Matrix{Float64} : Basis vectors defining the spatial representation.\npoints::Vector{Float64} : Flattened node coordinates (length = 3N).\negs::Matrix{Int64} : Edge connections within the network.\nrls::Vector{Float64} : Rest lengths for each edge.\niis::Matrix{Int} : Image offsets for periodic boundary conditions.\nyoungs::Vector{Float64} : Young’s modulus values for each edge.\n\nBehavior\n\nModifies the Hessian H directly instead of allocating a new matrix.\nEach edge contributes a 3×3 block that is scattered into the global matrix.\n\nReturns\n\nThe Hessian matrix H is updated in-place.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticityAD.moduli-Tuple{Network}","page":"Home","title":"ElasticityAD.moduli","text":"moduli(net)\n\nComputes the elastic moduli of a network by applying small deformations and extracting the stiffness components.\n\nDescription\n\nThis function performs an energy minimization (relax!) and then computes elastic moduli using automatic differentiation. The moduli components are obtained by introducing small strain perturbations in various deformation modes and measuring the corresponding energy response.\n\nArguments\n\nnet::Network : The network structure containing connectivity, node positions, and edge properties.\n\nBehavior\n\nRelaxation - Minimizes the elastic energy of the network to find a stable configuration.\nDeformation Basis Construction - Defines strain modes using deformation basis functions.\nHessian Computation - Computes the Hessian of the system at equilibrium.\nEnergy Perturbation & Differentiation - Uses automatic differentiation (ForwardDiff.hessian) to compute energy responses to small deformations.\nModuli Extraction - Computes bulk modulus (B), shear modulus (G), and individual elastic constants.\n\nReturns\n\nB::Float64 : Bulk modulus.\nG::Float64 : Shear modulus.\nc1111::Float64, c2222::Float64, c3333::Float64 : Normal stress components.\nc1212::Float64, c1313::Float64, c2323::Float64 : Shear stress components.\nc1122::Float64, c1133::Float64, c2233::Float64 : Mixed stress components.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticityAD.net_info_primitive-Tuple{Network}","page":"Home","title":"ElasticityAD.net_info_primitive","text":"net_info_primitive(net::Network)\n\nConverts network data into numerical matrices containing only primitive types, enabling efficient SIMD (Single Instruction, Multiple Data) operations.\n\nWhat is SIMD?\n\nSIMD is a parallel computing technique that allows the same operation to be applied to multiple data points simultaneously. By structuring data for SIMD, numerical computations can be executed faster by leveraging modern processor optimizations.\n\nArguments\n\nnet::Network : The network structure containing connectivity, node positions, and edge properties.\n\nReturns\n\nbasis::Matrix{Float64} : Basis vectors defining the network space.\npoints::Vector{Float64} : Flattened node coordinates.\nedges::Matrix{Int64} : Edge connections formatted for numerical processing.\nrls::Vector{Float64} : Rest lengths of edges.\niis::Matrix{Int} : Image information for periodic boundary conditions.\nyoungs::Vector{Float64} : Young’s modulus values for edges.\n\n\n\n\n\n","category":"method"},{"location":"#ElasticityAD.prestrained_network","page":"Home","title":"ElasticityAD.prestrained_network","text":"prestrained_network(g, basis, points, ϵ, default_youngs=1.0)\n\nCreates a Network with prestrained edges based on the provided graph, basis vectors, and node coordinates.\n\nArguments\n\ng::SimpleGraph : Graph specifying the connectivity of the network.\nbasis::Matrix{Float64} : Basis vectors defining the space in which the nodes are embedded.\npoints::Matrix{Float64} : Coordinates of the nodes.\nϵ::Float64 : Prestrain factor, adjusting the rest lengths of spring edges.\ndefault_youngs::Float64 (optional, default = 1.0) : Default Young’s modulus assigned to all edges.\n\nReturns\n\nNetwork : A network with computed rest lengths, image information for periodic boundaries, and Young's modulus values for each edge.\n\n\n\n\n\n","category":"function"},{"location":"#ElasticityAD.relax-Tuple{Any}","page":"Home","title":"ElasticityAD.relax","text":"relax(net; show_trace=false, g_tol=1e-6)\nrelax!(net; show_trace=false, g_tol=1e-6)\n\nMinimizes the elastic energy of a network using Newton's optimization method, adjusting node positions to a lower-energy configuration.\n\nMethods:\n\nrelax(net; show_trace, g_tol) → (Matrix{Float64}, Float64)   Returns the optimized node positions and the minimized elastic energy value.\nrelax!(net; show_trace, g_tol) → nothing   Performs relaxation in-place by updating net.points directly.\n\nArguments\n\nnet::Network : The network structure containing connectivity, node positions, and edge properties.\nshow_trace::Bool (optional, default=false) : Whether to display optimization progress.\ng_tol::Float64 (optional, default=1e-6) : Gradient tolerance for termination criteria.\n\nBehavior\n\nExtracts network data into primitive form using net_info_primitive(net).\nDefines the elastic energy function (f), its gradient (g!), and Hessian (h!).\nUses Newton's method (Optim.optimize) for minimization.\nrelax! modifies the network in-place, updating net.points.\n\n\n\n\n\n","category":"method"}]
}
